---
import { Image } from "astro:assets";
import Welcome from "../components/Welcome.astro";
import Layout from "../layouts/Layout.astro";
import type { ImageMetadata } from "astro";
import { Masonry } from "astro-masonry";

const listOfFireworks = import.meta.glob<{ default: ImageMetadata }>("/src/assets/fireworks-images/*.jpeg");
const listing = Object.values(listOfFireworks);
---

<Layout>
	<Masonry
		breakpointCols={{
			default: 4,
			1100: 3,
			700: 2,
			500: 1,
		}}>
		{
			listing.map((path, index) => {
				return (
					<div id='image-container'>
						<button data-getImageSource={path()}>See Image</button>
						<div id='index'>{index + 1}</div>
						<Image src={path()} alt='Fireworks' />
					</div>
				);
			})
		}
	</Masonry>
	<dialog>
		<div id='dialog-content'>
			<Image id='dialog-image' src={listing[0]()} alt='Fireworks' style={{ objectFit: "contain" }} />
			<button>Close</button>
		</div>
	</dialog>

	<style lang='scss'>
		:global(.astro-masonry-grid) {
			/* Your custom styles */
			/* You will need to add display: flex */
			padding: 2rem;
			gap: 1rem;
		}

		:global(.astro-masonry-grid_column) {
			/* Your custom column styles */
			display: grid;
			gap: 1rem;
		}

		#image-container {
			display: flex;
			position: relative;
			overflow: hidden;
			border-radius: 10px;
			border: 1px solid rgba(217, 215, 215, 0.844);

			img {
				
			}

			img:hover {
				transform: scale(1.1);
				transition: transform 0.5s;
			}
		}

		#index {
			position: absolute;
			top: 1%;
			left: 1%;
			background-color: rgba(0, 0, 0, 0.5);
			color: white;
			padding: 5px;
			border-radius: 5px;
			z-index: 2;
		}

		button {
			position: absolute;
			top: 1%;
			right: 1%;
			background-color: rgba(0, 0, 0, 0.5);
			color: white;
			padding: 5px;
			border-radius: 5px;
			z-index: 2;
		}

		body {
			background-color: black;
		}

		#dialog-content {
			width: 50dvw;
			height: 50dvh;
		}
		#dialog-image {
			width: 100%;
			height: 100%;
		}
	</style>

	<script>
		const dialog = document.querySelector("dialog") as HTMLDialogElement;
		const buttons = document.querySelectorAll("button") as NodeListOf<HTMLButtonElement>;

		buttons.forEach(button => {
			button.addEventListener("click", e => {
				const currentImage = e.target.parentElement.querySelector("img") as HTMLImageElement;
				const dialogImage = dialog.querySelector("#dialog-image") as HTMLImageElement;
				dialogImage.src = currentImage.src;
				dialog.showModal();
			});
		});

		dialog.addEventListener("click", () => {
			dialog.close();
		});
	</script></Layout
>
