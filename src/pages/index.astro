---
import { getImage, Image } from "astro:assets";
import Welcome from "../components/Welcome.astro";
import Layout from "../layouts/Layout.astro";
import type { ImageMetadata } from "astro";
import { Masonry } from "astro-masonry";
import ExifReader, { load } from "exifreader";
import { DateTime } from "luxon";
import ImageModal from "../components/ImageModal.astro";

const listOfFireworks = import.meta.glob<{ default: ImageMetadata }>("/src/assets/fireworks-images/*.jpeg", { eager: true });

interface DataTypes {
	metadata: ExifReader.Tags;
	image_data: ImageMetadata;
	googleMapsSrc: string;
	date: string;
}

const mapping = Object.entries(listOfFireworks).map<Promise<DataTypes>>(async ([path, image]) => {
	const newPath = path.slice(1);
	const metadata = await ExifReader.load(newPath);
	const gpsData = metadata;
	const area = convertGPSToString(gpsData);
	const areaString = encodeURIComponent(area.gpsToString);
	const src = `https://www.google.com/maps/embed/v1/place?q=${areaString}&key=${import.meta.env.VITE_GOOGLE_MAPS_API_KEY}`;
	const photoDate = getDate(metadata);

	return {
		metadata,
		image_data: image.default,
		googleMapsSrc: src,
		date: photoDate.formattedDate,
	};
});

const listing = await Promise.all(mapping);

function convertGPSToString(gpsData: ExifReader.Tags) {
	function convertToDMS(coordinates) {
		const degrees = coordinates.value[0][0];
		const minutes = coordinates.value[1][0];
		const seconds = (coordinates.value[2][0] / coordinates.value[2][1]).toFixed(1);
		return `${degrees}Â°${minutes}'${seconds}"`;
	}

	const lat = convertToDMS(gpsData.GPSLatitude);
	const lng = convertToDMS(gpsData.GPSLongitude);
	const latDir = gpsData.GPSLatitudeRef.value[0];
	const lngDir = gpsData.GPSLongitudeRef.value[0];

	return {
		gpsToString: `${lat}${latDir} ${lng}${lngDir}`,
		gpsData: {
			latitude: gpsData.GPSLatitude.description,
			longitude: gpsData.GPSLongitude.description,
		},
	};
}

function getDate(metadata: ExifReader.Tags) {
	const TimeInfo = [metadata.DateTimeOriginal?.description, metadata.OffsetTimeOriginal?.description, metadata.OffsetTimeDigitized?.description];
	// const contextString = "2017-05-15T09:10:23-09:00";

	if (!TimeInfo[0]) {
		return { formattedDate: "No Date Found" };
	}
	const [date, time] = TimeInfo[0].split(" ");
	const contextString = `${date.replaceAll(":", "-")}T${time}`;

	// Parse the date string correctly
	const parsedDate = DateTime.fromISO(contextString);

	// Format output as mm/dd/yyyy [time] [name of timezone]
	const formattedDate = parsedDate.toFormat("MM/dd/yyyy hh:mm a");

	return { formattedDate };
}
---

<Layout>
	<h3 class='text-4xl font-bold text-white text-center p-4'>Disney Fireworks by Jesse Slomowitz</h3>

	<Masonry
		sortByHeight={true}
		breakpointCols={{
			default: 4,
			1100: 3,
			700: 2,
			500: 1,
		}}>
		{
			listing.map(async ({ image_data, googleMapsSrc, date }, index) => {
				return (
					<div id='image-container'>
						<button id='show-dialog-button' class='btn btn-xs' data-GPSSrc={googleMapsSrc}>
							See Image
						</button>
						<div id='index' class='badge'>
							{index + 1}
						</div>
						<Image src={image_data} alt='Fireworks' id='mason-image' />
						{/* <dialog class='modal'>
							<div class='modal-box max-w-full'>
								<div id='dialog-content' class='bg-base-100 shadow-sm h-full'>
									<div class="flex">
										<figure>
											<Image src={image_data} alt='Fireworks' id='dialog-image' style="width: 32px; height: 32px; object-fit:contain"/>
										</figure>
										<iframe />
									</div>
									<div class='card-body'>
										<div class='card-actions justify-end'>
											<div id='time-area' class='badge badge-outline'>
												Date: {date}
											</div>
										</div>
									</div>
									<button id='close-dialog-button' class='btn btn-md'>
										X
									</button>
								</div>
							</div>
						</dialog> */}
						<ImageModal imageUrl={image_data} mapSrc={googleMapsSrc} date={date} index={index} />
					</div>
				);
			})
		}
	</Masonry>
</Layout>

<style lang='scss'>
	:global(.astro-masonry-grid) {
		/* Your custom styles */
		/* You will need to add display: flex */
		gap: 0.5rem;
		padding: 3rem;
	}

	:global(.astro-masonry-grid_column) {
		/* Your custom column styles */
		display: flex;
		flex-direction: column;
		gap: 1rem;
		justify-content: space-between;
	}

	#image-container {
		position: relative;
		overflow: hidden;
		border-radius: 10px;
		border: 1px solid rgba(217, 215, 215, 0.844);

		#mason-image:hover {
			transform: scale(1.1);
			transition: transform 0.5s;
		}
	}

	#index {
		position: absolute;
		top: 1%;
		left: 1%;
		z-index: 2;
	}

	button {
		position: absolute;
		top: 1%;
		right: 1%;
		// background-color: rgba(0, 0, 0, 0.5);
		// color: white;
		// padding: 5px;
		// border-radius: 5px;
		z-index: 2;
	}

	body {
		background-color: black;
	}

	dialog {
		background-color: rgba(0, 0, 0, 0.8);
		border: none;
		border-radius: 0.5rem;
		overflow: visible;
		scroll: auto;
	}

	#dialog-content {
		// height: 100%;
		// overflow: hidden;
		// overflow-y: scroll;
		scrollbar-width: none;
	}

	.image-iframe {
		// display: grid;
		// grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
		// grid-auto-rows: 75dvh;
	}
	// #dialog-image {
	// 	object-fit: contain;
	// 	width: 100%;
	// 	height: 100%;
	// 	object-position: center;
	// 	border-radius: 0.5rem;
	// }
</style>

<script>
	const dialog = document.querySelectorAll<HTMLDialogElement>("dialog");
	const showDialogButton = document.querySelectorAll<HTMLButtonElement>("#show-dialog-button");

	showDialogButton.forEach((button, index) => {
		button.addEventListener("click", () => {
			dialog[index].showModal();
			const src = button.getAttribute("data-GPSSrc");
			const iframe = dialog[index].querySelector("iframe");
			if (iframe) {
				iframe.src = src || "";
			}
		});
	});
</script>
