---
import { Image } from "astro:assets";
import Layout from "../layouts/Layout.astro";
import type { ImageMetadata } from "astro";
import { Masonry } from "astro-masonry";
import { Schema } from "astro-seo-schema"
import ImageModal from "../components/ImageModal.astro";
import { getCollection } from "astro:content";
import { CldImage } from "astro-cloudinary";
import { CldVideoPlayer } from "astro-cloudinary";
import GoogleMaps from "@/components/GoogleMaps.astro"
import { Head } from "@zfben/astro-head";

// const listOfFireworks = import.meta.glob<{ default: ImageMetadata }>("/src/assets/Disney-Fireworks/*.{JPG,jpeg,MOV}", { eager: true });

// const mapping = Object.entries(listOfFireworks).map<Promise<DataTypes>>(setupExifData);

// const listing = await Promise.all(mapping);

const listOfFireworks = await getCollection("Disney Fireworks");

const gpsList = listOfFireworks.map(({ data }) => ({decLatitude: data.decLatitude, decLongitude: data.decLongitude}));

const ldArray = listOfFireworks.map(({ data }) => {
	return {
		"@context": "https://schema.org",
		"@type": ["ImageObject", "Place"],
		"contentUrl": `https://res.cloudinary.com/dqv6g0w1a/image/upload/v169258${data.public_id}`,
		"dateCreated": data.date,
		"creditText": "Jesse Slomowitz",
		"creator": {
			"@type": "Person",
			"name": "Jesse Slomowitz",
		},
		"geo": {
			"@type": "GeoCoordinates",
			"latitude": data.decLatitude,
			"longitude": data.decLongitude
		},
		"copyrightNotice": "Jesse Slomowitz",
		"keywords": ["Disney", "Fireworks", "Jesse Slomowitz"],
		"license": "https://creativecommons.org/licenses/by-nc-sa/4.0/",
		"thumbnailUrl": `https://res.cloudinary.com/dqv6g0w1a/image/upload/c_scale,w_200/v169258${data.public_id}`,
		"height": data.height,
		"width": data.width,
		"datePublished": data.date,
	}
})
---

<Layout>
	<!-- <Head slot="seo" title="Disney Fireworks by Jesse Slomowitz" path={Astro.url}/> -->
	<script is:inline type="application/ld+json" slot="seo" set:html={JSON.stringify(ldArray)} />
	<h3 class='text-4xl font-bold text-center'>Disney Fireworks by Jesse Slomowitz</h3>
	<button id="toggle-map-button" class="btn btn-secondary my-2">Show Map</button>
	<GoogleMaps markerList={gpsList}/>
	<Masonry
		sortByHeight={true}
		class='custom-masonry'
		columnClass='custom-column-class'
		breakpointCols={{
			default: 4,
			1100: 3,
			700: 2,
			500: 1,
		}}>
		{
			listOfFireworks.map(async ({ data }, index) => {
				const positionString = `${data.decLatitude},${data.decLongitude}`;
				let displayType = (
				<button id='show-dialog-button' class='absolute top-10 right-10 z-10 btn btn-xs bg-blue-500 text-white hover:shadow-lg' data-GPSSrc={data.googleSrc} data-date={data.date} data-index={index}>
							See Image
						</button>
						<div id='index' class='absolute top-10 left-10 z-10 badge bg-gray-800 text-white opacity-50'>
							{index + 1}
						</div>
				<CldImage data-marker-id={positionString} src={data.public_id} height={data.height} width={data.width} alt='Fireworks' id={`mason-image-${index}`} class='transition-transform duration-500 hover:scale-110' />);

				if (data.resource_type === "video") {
					displayType = <CldVideoPlayer src={data.public_id} height={data.height} width={data.width} id={`mason-image-${index}`} />
				}

				return (
					<div id='image-container' class='relative overflow-hidden rounded-lg border border-gray-300'>
						{displayType}
					</div>
				);
			})
		}
	</Masonry>
	<ImageModal />
</Layout>

<style lang='scss'>
	#index {
		position: absolute;
		top: 1%;
		left: 1%;
		z-index: 2;
	}

	#show-dialog-button {
		position: absolute;
		top: 1%;
		right: 1%;
		z-index: 2;
	}

	dialog {
		background-color: rgba(0, 0, 0, 0.8);
		border: none;
		border-radius: 0.5rem;
		overflow: visible;
		scroll: auto;
	}

	#dialog-content {
		scrollbar-width: none;
	}
</style>

<style is:global>
	.custom-masonry {
		/* Your custom styles */
		/* You will need to add display: flex */
		display: flex;
		gap: 1rem;
		padding-block: 1rem;
	}

	.custom-column-class {
		/* Your custom column styles */
		display: flex;
		flex-direction: column;
		gap: 1rem;
		justify-content: space-between;
	}
</style>



<script>
	import constructModalImage from "@/functions/constructModalImage";

	const dialog = document.querySelector<HTMLDialogElement>("dialog");
	const showDialogButton = document.querySelectorAll<HTMLButtonElement>("#show-dialog-button");
	const iframe = dialog?.querySelector("iframe");
	const date = dialog?.querySelector<HTMLDivElement>("#date");

	showDialogButton.forEach(button => constructModalImage(dialog, iframe, date, button));
</script>

<script>
	const mapButton = document.querySelector<HTMLButtonElement>("#toggle-map-button");

	mapButton?.addEventListener("click", () => {
		const map = document.querySelector("#google-map");
		if (map) {
			map.toggleAttribute("hidden");
		}
	});
</script>
